{"version":3,"sources":["components/dialog/AddTodoDialog.js","service/todo-service.js","context/todo/todo-actions.js","context/todo/todo-reducer.js","context/todo/TodoContext.js","context/todo/todo-selector.js","components/todo-view/TodoCard.js","components/todo-view/TodoPanel.js","components/todo-view/TodoView.js","App.js","serviceWorker.js","index.js"],"names":["AddTodoDialog","open","onClose","onAdd","useState","description","setDescription","Dialog","aria-labelledby","DialogTitle","id","DialogContent","TextField","autoFocus","value","onChange","e","target","margin","label","type","fullWidth","DialogActions","Button","onClick","color","axios","require","getTodos","a","get","addTodo","put","deleteTodo","delete","setTodoStatus","status","fetchItems","dispatch","response","todos","data","error","addItem","todo","deleteItem","payload","setItemStatus","todoContextReducer","state","action","fetch","adding","map","deleting","filter","updating","TodoStateContext","React","createContext","undefined","TodoDispatchContext","TodoContextProvider","children","useReducer","Provider","useTodoDispatch","context","useContext","Error","TodoCard","item","style","CardContent","Typography","variant","component","CardActions","size","TodoPanel","items","display","flexDirection","flexGrow","textAlign","mapStatus","backgroundColor","padding","key","TodoView","useTodoState","openAddDialog","setOpenAddDialog","useEffect","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c7d02d10.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport const AddTodoDialog = ({open, onClose, onAdd}) => {\n    const [description, setDescription] = useState('');\n    return (\n        <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">Add</DialogTitle>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    margin=\"dense\"\n                    label=\"Description\"\n                    type=\"text\"\n                    fullWidth\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onClose()} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={() => onAdd(description)} color=\"primary\">\n                    Add\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n","const axios = require('axios');\n\nexport const getTodos = async () => {\n    return await axios.get('/api/todo');\n};\n\nexport const addTodo = async (description) => {\n    return await axios.put('/api/todo', {\n        description: description\n    });\n};\n\nexport const deleteTodo = async (id) => {\n    return await axios.delete(`/api/todo/${id}`);\n};\n\nexport const setTodoStatus = async (id, status) => {\n    return await axios.put(`/api/todo/${id}/status`, {\n        status: status\n    });\n};\n\n","import {addTodo, getTodos, deleteTodo, setTodoStatus} from \"../../service/todo-service\";\n\nexport const FETCH_TODOS = 'FETCH_TODOS';\nexport const FETCH_TODOS_SUCCESS = 'FETCH_TODOS_SUCCESS';\nexport const FETCH_TODOS_FAILED = 'FETCH_TODOS_FAILED';\n\nconst fetchItems = async (dispatch) => {\n    dispatch({type: FETCH_TODOS});\n    try {\n        const response = await getTodos();\n        dispatch({type: FETCH_TODOS_SUCCESS, todos: response.data});\n    } catch (error) {\n        dispatch({type: FETCH_TODOS_FAILED, error});\n    }\n};\n\nexport const ADD_TODO = 'ADD_TODO';\nexport const ADD_TODO_SUCCESS = 'ADD_TODO_SUCCESS';\nexport const ADD_TODO_FAILED = 'ADD_TODO_FAILED';\n\nconst addItem = async (dispatch, description) => {\n    dispatch({type: ADD_TODO});\n    try {\n        const response = await addTodo(description);\n        dispatch({type: ADD_TODO_SUCCESS, todo: response.data});\n    } catch (error) {\n        dispatch({type: ADD_TODO_FAILED, error});\n    }\n};\n\nexport const DELETE_TODO = 'DELETE_TODO';\nexport const DELETE_TODO_SUCCESS = 'DELETE_TODO_SUCCESS';\nexport const DELETE_TODO_FAILED = 'DELETE_TODO_FAILED';\n\nconst deleteItem = async (dispatch, id) => {\n    dispatch({type: DELETE_TODO, payload: id});\n    try {\n        await deleteTodo(id);\n        dispatch({type: DELETE_TODO_SUCCESS, id});\n    } catch (error) {\n        dispatch({type: DELETE_TODO_FAILED, error});\n    }\n};\n\nexport const SET_TODO_STATUS = 'SET_TODO_STATUS';\nexport const SET_TODO_STATUS_SUCCESS = 'SET_TODO_STATUS_SUCCESS';\nexport const SET_TODO_STATUS_FAILED = 'SET_TODO_STATUS_FAILED';\n\nconst setItemStatus = async (dispatch, id, status) => {\n    dispatch({type: SET_TODO_STATUS, payload: {id, status}});\n    try {\n        const response = await setTodoStatus(id, status);\n        dispatch({type: SET_TODO_STATUS_SUCCESS, todo: response.data});\n    } catch (error) {\n        dispatch({type: SET_TODO_STATUS_FAILED, error});\n    }\n};\n\nexport {\n    fetchItems,\n    addItem,\n    deleteItem,\n    setItemStatus\n};\n","import {\n    ADD_TODO,\n    ADD_TODO_FAILED,\n    ADD_TODO_SUCCESS, DELETE_TODO, DELETE_TODO_FAILED, DELETE_TODO_SUCCESS,\n    FETCH_TODOS,\n    FETCH_TODOS_FAILED,\n    FETCH_TODOS_SUCCESS, SET_TODO_STATUS, SET_TODO_STATUS_FAILED, SET_TODO_STATUS_SUCCESS\n} from \"./todo-actions\";\n\nexport const todoContextReducer = (state, action) => {\n    switch (action.type) {\n        case FETCH_TODOS:\n            return {...state, fetch: 'RUNNING'};\n        case FETCH_TODOS_SUCCESS:\n            return {...state, todos: action.todos, fetch: 'SUCCESS'};\n        case FETCH_TODOS_FAILED:\n            return {...state, fetch: 'FAILED'};\n        case ADD_TODO:\n            return {...state, adding: 'RUNNING'};\n        case ADD_TODO_SUCCESS:\n            return {...state, todos: [...state.todos, action.todo], adding: 'SUCCESS'};\n        case ADD_TODO_FAILED:\n            return {...state, adding: 'FAILED'};\n        case DELETE_TODO:\n            return {\n                ...state,\n                todos: state.todos.map(todo => todo.id === action.id ? ({...todo, deleting: 'RUNNING'}) : todo)\n            };\n        case DELETE_TODO_SUCCESS:\n            return {...state, todos: state.todos.filter(todo => todo.id !== action.id)};\n        case DELETE_TODO_FAILED:\n            return {\n                ...state,\n                todos: state.todos.map(todo => todo.id === action.id ? ({...todo, deleting: 'FAILED'}) : todo)\n            };\n        case SET_TODO_STATUS:\n            return {\n                ...state,\n                todos: state.todos.map(todo => todo.id === action.id ? ({...todo, updating: 'RUNNING'}) : todo)\n            };\n        case SET_TODO_STATUS_SUCCESS:\n            return {...state, todos: [...state.todos.filter(todo => todo.id !== action.todo.id), action.todo]};\n        case SET_TODO_STATUS_FAILED:\n            return {\n                ...state,\n                todos: state.todos.map(todo => todo.id === action.id ? ({...todo, updating: 'FAILED'}) : todo)\n            };\n        default:\n            return state;\n    }\n};\n","import React from \"react\";\nimport {todoContextReducer} from \"./todo-reducer\";\n\nexport const TodoStateContext = React.createContext(undefined);\nexport const TodoDispatchContext = React.createContext(undefined);\n\nexport const TodoContextProvider = ({children}) => {\n    const [state, dispatch] = React.useReducer(todoContextReducer, {\n        todos: []\n    });\n    return <TodoStateContext.Provider value={state}>\n        <TodoDispatchContext.Provider value={dispatch}>\n            {children}\n        </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n};\n","import React from \"react\";\nimport {TodoDispatchContext, TodoStateContext} from \"./TodoContext\";\n\nexport const useTodoState = () => {\n    const context = React.useContext(TodoStateContext);\n    if (context === undefined) {\n        throw new Error('useTodoState must be used within a TodoContextProvider')\n    }\n    return context\n};\n\nexport const useTodoDispatch = () => {\n    const context = React.useContext(TodoDispatchContext);\n    if (context === undefined) {\n        throw new Error('useTodoDispatch must be used within a TodoContextProvider')\n    }\n    return context\n};\n","import CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card/Card\";\nimport React from \"react\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {useTodoDispatch} from \"../../context/todo/todo-selector\";\nimport {deleteItem, setItemStatus} from \"../../context/todo/todo-actions\";\n\nexport const TodoCard = ({item}) => {\n    const dispatch = useTodoDispatch();\n\n    return <Card style={{margin: '0.2rem'}}>\n        <CardContent>\n            <Typography variant=\"body2\" component=\"p\">\n                {item.description}\n            </Typography>\n        </CardContent>\n        <CardActions>\n            <Button size=\"small\" onClick={() => deleteItem(dispatch, item.id)}>Delete</Button>\n            {item.status === 'OPEN' &&\n            <Button size=\"small\" onClick={() => setItemStatus(dispatch, item.id, 'IN_PROGRESS')}>Progress</Button>}\n            {item.status === 'IN_PROGRESS' &&\n            <Button size=\"small\" onClick={() => setItemStatus(dispatch, item.id, 'DONE')}>Done</Button>}\n        </CardActions>\n    </Card>\n};\n","import React from \"react\";\nimport {TodoCard} from \"./TodoCard\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport const TodoPanel = ({items, status}) => {\n    return <div style={{display:'flex', flexDirection:'column', flexGrow: 1}}>\n        <Typography variant=\"h5\" component=\"h2\" style={{textAlign: 'center'}}>\n            {mapStatus(status)}\n        </Typography>\n        <div style={{backgroundColor: '#f4f4f4', padding: '1rem', flexGrow: 1}}>\n            {items.filter(item => item.status === status)\n                .map(item => <TodoCard key={item.id} item={item}/>)}\n        </div>\n    </div>\n};\n\nconst mapStatus = (status) => {\n    switch (status) {\n        case 'OPEN':\n            return 'Open';\n        case 'IN_PROGRESS':\n            return 'In Progress';\n        case 'DONE':\n            return 'Done';\n        default:\n            return status;\n    }\n};\n","import React, {useEffect, useState} from \"react\";\nimport {Button} from '@material-ui/core';\nimport {AddTodoDialog} from \"../dialog/AddTodoDialog\";\nimport {TodoPanel} from \"./TodoPanel\";\nimport {addItem, fetchItems} from \"../../context/todo/todo-actions\";\nimport {useTodoDispatch, useTodoState} from \"../../context/todo/todo-selector\";\n\nexport const TodoView = () => {\n    const {todos} = useTodoState();\n    const [openAddDialog, setOpenAddDialog] = useState(false);\n\n    const dispatch = useTodoDispatch();\n    useEffect(() => {\n        fetchItems(dispatch);\n    }, [dispatch]);\n\n    return <div style={{display: 'flex', flexDirection: 'column', height: '100%'}}>\n        <Button color=\"primary\" onClick={() => setOpenAddDialog(true)}>Add</Button>\n        <div style={{display: 'flex', flexGrow: 1}}>\n            <TodoPanel items={todos} status={'OPEN'}/>\n            <TodoPanel items={todos} status={'IN_PROGRESS'}/>\n            <TodoPanel items={todos} status={'DONE'}/>\n        </div>\n        {openAddDialog &&\n        <AddTodoDialog open={openAddDialog} onClose={() => setOpenAddDialog(false)} onAdd={async (description) => {\n            setOpenAddDialog(false);\n            await addItem(dispatch, description);\n        }}/>}\n    </div>\n};\n","import React from 'react';\nimport './App.css';\nimport {TodoView} from \"./components/todo-view/TodoView\";\nimport {TodoContextProvider} from \"./context/todo/TodoContext\";\n\nfunction App() {\n\n    return (\n        <TodoContextProvider>\n            <TodoView/>\n        </TodoContextProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}